# 깃 프로젝트 
  git init
  git-hub 레포지토리 생성 / Private이나 Public으로 설정
  git remote add origin {저장소 URL}


# 필수 소프트웨어 : 브라우저(chromium 기반의 브라우저), VisualStudioCode, NodeJS(nodejs.org), git, github, MongoDB

# VSC 확장마켓 : Auto Rename Tag, Black Formatter, Community Material Theme, ESLint, gitignore, Korean Language Pack, Live Server,
  Material Icon Theme, Material Theme, Material Theme Icons, Prettier, Python, SQLite Viewer, TabOut

# NodeJS 란? : 크롬 V8 자바스크립트 엔진으로 빌드 된 자바스크립트 런타임
  NodeJS는 브라우저 밖에서 돌아가는 자바스크립트.
  더 이상 브라우저의 죄수가 아니다. 브라우저라는 감옥에 갖혀 있지 않고 자유이다.

# npm 란? : NodeJS의 친구같은 존재
  자바스크립트 언어를 위한 패키지 매니저
  npm 과 nodeJS는 같이 사용해야 된다.(같이 설치가 된다.)
  nodeJS와 상호작용을 할 수 있게 해준다.
  yarn이라는 패키지 매니저도 존재하는데, npm과 yarn 이 둘 사이에는 차이가 거의 없다.
  여러 곳에 있는 대단한 사람들이 작은 패키지를 만들어주는데, 우리가 이 패키지를 가져다 쓸 수가 있다.(개발을 편리하게 도움을 준다.)
  서로를 연결 시켜주거나 다운로드 받을 수 있게 해준다.

# npmjs.com/

# 패키지 : 
  express : npm install express

# 프로젝트 생성 
  1. 폴더 생성
  2. package.json이라는 파일을 만들어야 한다. - npm init(npm이 package.json 만드는것을 도와준다.)
  깃허브 연동이 되어있다면 package.json 안에서 license 밑에 아래의 코드가 추가된다.
  // "bugs": {
  //   "url": "Git-Hub 레포지토리 주소/issues"
  // },
  // "homepage": "Git-Hub 레포지토리 주소#readme"
  // "repository": {
  // "type": "git",
  // "url": "git+Git-Hub 레포지토리주소.git"
  // },

# main이 뭐냐면, 프로젝트의 대표 파일이 뭔지 알려주는 것.
  만들고 배포한 package를 다른 사람들이 설치하면 main을 사용.

# scripts 란? : 실행하고 싶은 것을 말한다.
  서버를 시작하는 script, css를 압축하는 script 등등 많은것에 이용을 할 수 있다.
  ex : 
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "win": "node index.js"
  },
  $ npm run win 식으로 입력을 하면 'node index.js' 가 실행이 된다. 단! 프로젝트 폴더 안에서(package.json이 있는 위치에서 작동)


# node index.js - index.js 를 실행시킨다. - 이거 대신에 package.json으로 실행.

# 패키지 설치 : npm i {패키지이름} or  npm install {패키지이름} - 패키지 이름은 npm사이트에서 나오는 패키지 이름을 동일하게 작성.

# 위와 같이 패키지를 생성하면 package-lock.json 과 node_modules가 생성이 된다.

# node_modules 에는 내가 설치한 패키지와 그 패키지에 필요한 패키지들 모두가 연결되어 설치가 된다.

# 설치를 할 때는 package.json 창을 닫고 설치하도록 한다. 설치이후에는 package.json 의존성 패키지에 추가가되기 때문에.

# node_modules와 package-lock.json 파일을 지워도 내 프로젝트 폴더에 있는 'package.json'에 의존성만 잘 추가가되어 있다면
  'npm i' or 'npm install'을 통해서 언제든 다시 생성할 수 있다. 우리에게 중요한 것은 'package.json' 인것!!

# package-lock.json은 나의 패키지들을 안전하게 관리해준다. 패키지가 수정이 되었는지 해쉬값으로 체크

# babel(babeljs.io) : nodeJS가 자바스크립트를 문제없이 이해하도록 변환해 준다. babel 사이트를 보고 설정파일 까지 추가 설정 및 생성.
  babel로 컴파일하는 scripts 생성 후 사용.
  "@babel/core": "^7.23.2",
  "@babel/node": "^7.22.19",
  "@babel/preset-env": "^7.23.2"
  
# nodemon : 파일이 수정되면 nodemon이 알아서 재시작을 한다.
  "nodemon": "^3.0.1"

# package.json 에서 devDependencies 는 개발자를 위한 패키지, 반대로 dependencies 는 프로젝트를 실행하기 위해 필요한 패키지.

# npm install --save-dev {패키지이름} : devDependencies로 구분하고 설치. 

# import express from "express"; : "express"라는 패키지를 express라는 이름으로 import 해온다.

# express application을 만들고 싶다면 : 
  import express from "express";
  const app = express();
  app.listen(port, callback);
  이렇게 작성을 하면 된다.

# app.get(route, middleCallback, finalCallback) : ex: app.get('/', callback)

# Middleware는 request 와 response 사이에 존재한다.
  브라우저가 request한 다음, 그리고 응답하기 전.

# 미들웨어, 파이널웨어 등 모두를 컨트롤러라고 생각을 하면 되는데, 기본적으로 req, res, next 의 arguments가 들어간다.

# next(); : 다음 컨트롤러 호출 / 관습적으로, 응답을 해주는 마지막 Controller에는 next를 사용하지 않는다.

# res.end(); : 응답 종료

# res.send('hello'); 

# app.use() : 글로벌 미들웨어를 만들 수 있게 해준다. 어느 URL에도 작동하는 MiddleWare.

# 주의해야할 점은 MiddleWare 를 use 하는게 먼저오고, 그 다음에 URL의 get이 와야한다.

# express는 모든 것을 위에서 아래 순으로 실행을 시킨다. 

# morgan 은 로깅에 도움이 되는 패키지(미들웨어 패키지 중 하나). morgan 옵션으로는 (combined, common, dev, short, tiny)

# Router 생성 : express.Router();

# import를 하기전에는 export를 진행해야 한다. 모든 파일은 모듈이기 때문에
  import globalRouter from "./routers/globalRouter"; 
  export default globalRouter;
  export default 로는 한 가지 밖에 export 하지 못한다.

# default로 export 할 때는 내가 원하는 어떤 이름으로 던지 임포트할 수 있다.
  
# 하지만 export const를 하게되면 실제 이름을 그대로 사용해야 한다.

# Controller 와 Router는 분리가 되어야 한다.

# /:id 'id'는 어떤 단어로 바꾸어도 상관이 없다. 중요한 것은 ":" 를 넣는것이다.
  이렇게 표시하는건 express한테 이게 변수라는걸 알려주기 위해서.

# console.log(req.params); : url 에서 요청받은 변수를 출력.

# videoRouter.get("/upload", upload);
  videoRouter.get("/:id", see);
  위의 순서를 변경을 하게 되면
  videoRouter.get("/:id", see);
  videoRouter.get("/upload", upload);
  request : localhost:4000/videos/upload 를 하게 되면 /upload 보다 :id(upload)로 인식을 하고 이동하게 된다.
  위에를 먼저 보기 때문에.
  
# express 라우팅(참고 : https://expressjs.com/en/guide/routing.html)

# 정규식은 문자열로부터 특정 정보를 추출해내는 방법.
  정규식은 모든 프로그래밍 언어에 존재.

# 숫자만 받는 정규식 "/:id(\\d+)"

# HTML을 리턴하는데는 두 가지 옵션이 있다.
  1. res.send("<h1>문자열</h1>") - 그냥 HTML의 문자열을 사용해서 보내는 방법

# Pug : 웹 개발에서 사용되는 템플릿 엔진 중 하나이다.
  장점 :
  1. 간결한 문법
  2. 가독성
  3. 재사용 가능한 블록
  4. 변수 및 제어문
  5. 템플릿 상속

# Pug 사용방법

# 1. Pug 설치 : npm install Pug
# 2. 다음으로는 Express에게 html 헬퍼로 pug를 쓰겠다고 말하는것이다.
  app.set("view engine", "pug");
# 3. 실제로 pug 파일을 생성한다.

# *.pug 파일을 그대로 유저에게 보내는것은 아니고, 파일을 pug로 보내고
  평범한 html로 변환한다.

# 현재 작업 디렉토리 확인 방법 console.log(process.cwd());

# 기본적으로 express는 cwd + /views 에서 pug파일을 찾는다.
  (하지만 우리는 cwd/src/views 에 위치한다.)

# cwd는 어디서 node.js를 부르고, 어디서 서버를 기동하고 있는지.

# 누가 서버를 기동할까? : package.json
  package.json이 node.js를 실행하고 있다.

# 현재 작업 디렉토리는 노드를 시작하는 디렉토리이다!

# Pug에서 자바스크립트를 사용하는 방법 '#{}'
  템플릿에 어떤 자바스크립트 코드라도 넣을 수 있다.

# 파일명은 띄어쓰기가 없어야하고, 전부 소문자로 해야한다.

# 공통적인 HTML(footer...) 등은 따로 footer.pug를 생성하고 include 시킨다.
  들어갈 곳에 include ./partials/footer.png(경로).

# base.pug 를 만들고 확장시킨다. 확장방법 extends base.pug

# block 이름: block을 만들어서 페이지마다 다른 내용을 입력해서 넣을 수 있다.
  base.pug : block content
  home.pug : extends base.pug
             block content
               h1 Home!

# 블록은 확장한 템플릿 안에 내용을 넣을 수 있는 창문 또는 문 같은것이다.

# res.render 는 두가지를 받는다. ex.return res.render("home", { pageTitle: "home", potato: "tomato" });
  home.pug : #{potato}로 "tomato"를 받는다.

# MVP.css : HTML 태그에 몇 가지 기본 스타일들을 입혀준다. 
  임시방편, 단지 못생긴게 싫기 때문에 임시방편으로 조금 이쁘게 만들기 위해서.
  (https://andybrewer.github.io/mvp/)
  <link rel="stylesheet" href="https://unpkg.com/mvp.css"> 

# h1=pageTitle : 만일 이렇게 h1에다 =을 붙이고 variable을 쓰면 text가 아닌 variable로 인식된다.
  h1=pageTitle 이거는 h1 #{pageTitle} 과 동일하다.
  h1= 과 같이, 태그에 하나의 variable 값만 집어넣는 경우라면, 이렇게 하면 된다.

# if / else if 문
  if fakeUser.loggedIn
    li 
      a(href="/logout") Log out
  else
    li 
      a(href="/login") Login

# each 반복문(배열을 가지고 있는 변수) / array가 필요하다!
  each video in videos
    li=video
  else

# mixin은 partial이긴 한데 데이터를 받을 수 있는 partial을 말한다.
  HTML을 return 해주는 일종의 function

# mixin video(info)
    div 
        h4=info.title
        ul 
            li #{info.rating}/5.
            li #{info.comments} comments.
            li Posted #{info.createdAt}.
            li #{info.views} views.
  ##
  each video in videos
        +video(video)

# Iteration / Mixin

# 첫 번째 방법: a(href="/videos/" + video.id)=video.title
  두 번째 방법: 자바스크립트 template string을 사용. a(href=`/videos/${video.id}`)=video.title

# #{} 이 기호는 attribute에서는 사용할 수 없다. href, class, id 등등

# 절대경로: root 경로에 + 

# 상대경로: 현재 경로에 +

# form에서 기본값으로 method는 GET

# get 방식을 쓰는 form은 어떨 때 사용하는 것일까? 네이버나 구글에서 검색을 할때 주소창에 포함이 될것이다.

# post 방식은 파일을 보내거나, database에 있는 값을 바꾸는 뭔가를 보낼 때 사용한다.

# videoRouter.get() 과 videoRoute.post()는 각 method 방식에 따른 것만 설정할 수 있다.
  videoRouter.route("/:id(\\d+)/edit").get(getEdit).post(postEdit) -- 아래 2Line을 1Line으로 표현 하는 방법.
  videoRouter.get("/:id(\\d+)/edit", getEdit);
  videoRouter.post("/:id(\\d+)/edit", postEdit);

# res.redirect()는, 브라우저가 redirect(자동으로 이동) 하도록 하는 것이다.

# Express application은 form을 어떻게 다루는지 모른다. 아직은! application에게 form을 처리하고 싶다고 말해야 한다.
  미들웨어는 항상 router 이전에 위치 해야한다.

# Express 에게 form의 value들을 이해할 수 있도록 하고, 자바스크립트 형식으로 변형.
  app.use(express.urlencoded({ extended: true }));

# req.body.(input의 name 값)

# MongoDB : MongoDB에 저장하는 것들은 JSON-like-document 이다. 그러므로 행으로 된 데이터를 저장할 필요가 없다.
  document-based database 이다.

# chocolatey (https://chocolatey.org/) : Windows 운영체제에서 소프트웨어 패키지를 관리하고 자동화하는 패키지 관리자이다. 
  간단한게 script 언어로 설치 등이 가능하다. 

# mongoose: 매우 중요한 package라고 할 수 있다. mongoDB를 쓰기를 원하고, 그 작업을 자바스크립트를 써서 하고 싶을 경우 사용.
  Node.js 기반의 웹 어플리케이션 및 서버에서 MongoDB와 상호작용하기 위한 Object Data Modeling(ODM) 도구이자 라이브러리이다.
  node.js에서 mongoDB와 상호작용하기 위해서 mongoose를 사용한다.

# mongoDB가 정상적으로 설치되어있으면 터미널에 mongod를 입력하면 어지러운 구문이 표시되어야 한다.
  mongod 명령어가 실행이 되지 않는다면 환경변수 path에 C:\Program Files\MongoDB\Server\7.0\bin 추가.
  추가 적인 문제로 DB의 저장경로가 찾을 수 없다는 문제점 -> sol: c\data\db 디렉토리를 직접 생성해줬다.

# mongos 를 입력하고 강의에는 나와있었지만 mongod 정상적으로 실행이 되더라도 안되는 문제가 발생했다.

# 여러가지 해결방법을 시도해보았지만, 따로 mongoDB shell을 다운로드 받고나서 해결을 했다. 설치경로를 추가로 환경변수에 등록을 해줬다.
  명령어: mongosh ex: show dbs 가 작동한다. 이상없음. 

# db.js 를 생성해서 컴퓨터에 실행되고 있는 mongo DB에 연결을 해준다.

# mongosh 를 실행해서 Connecting to : URL 을 받아야 한다. ex:  mongodb://127.0.0.1:27017

# import mongoose from "mongoose";
  mongoose.connect("mongodb://127.0.0.1:27017/[생성할 데이터베이스 이름]");

# import "./db";  // db.js 자체를 import

# DB 연결 시, 'punycode' 모듈 deprecated 경고가 뜬다. 해결을 찾아보니 노드 버전을 다운그레이드를 하라고 한다.
  노드버전을 변경할 수 있는 nvm이 있어야 한다. nvm 깃허브에 접속해서 다운로드 진행한다.

# nvm list available(cmd): 설치 가능한 node.js 버전 목록을 확인.
  nvm install 20.9.0: 원하는 버전 설치
  nvm use 20.9.0 사용할 버전 선택

# const db = mongoose.connection;
  db.on("error", ) : 여러번 계속 발생시킬 수 있다. 클릭같은 이벤트
  db.once("",) : 오로지 한 번만 발생하는 이벤트.

# src/models/video.js 에 mongoose import 후
  비디오 스키마(데이터의 생김새) 작성
  mongoose.model("모델이름", 모델스키마)

# video.find() : 콜백함수 와 프로미스 콜백이 제거되었다고 한다.

# export const home = async(req, res) => {
    const videos = await Video.find({});
    return res.render("home", { pageTitle: "Home", videos: videos });
  };
  await을 find 앞에 적으면 find는 네가 callback 을 필요로 하지 않는다는걸 알게 된다.
  그렇기 find는 찾아낸 비디오를 바로 출력해줄것이다.
  에러를 출력하기 위해서는 try / catch 를 사용할 것이다.
  await이 대단한 이유는 database 를 기다려주기 때문이다.(databse 에게 결과값을 받을 때까지.)

# 코딩 규칙상 await은 function 안에서만 사용이 가능하다. function이 비동기일 경우 

# split라 불리는 function.
  split 은 string 들을 분리하는 기능
  splitter 또는 separator 가 그 분리의 기준이 된다.

# "hello,food,totally,delis".split(",") --> ['hello', 'food', 'totally', 'delis']

# "hello,food,totally,delis".split(",").map((word) => { return `#${word}`}) --> ['#hello', '#food', '#totally', '#delis']

# monngose가 id를 부여해준다.(랜덤한 id)
  ⭐ video :  {
    title: 'Video 1',
    description: 'Best JavaScript',
    createdAt: 2023-11-02T06:33:10.532Z,
    hashtags: [ '#hello', '#how', '#are', '#you' ],
    meta: { views: 0, rating: 0 },
    _id: new ObjectId('654342a6544de9cd9e168a94')
  }

# 스키마에서 데이터형식이 String인 상태에 number 데이터를 넣어도 문제없이 String으로 변환해준다.
  데이터형식이 Number인 상태에 String 데이터를 넣으면 제외하고 데이터가 생성이 된다.

# .save() : 는 promise를 return 해준다.
  이 말은 save 작업이 끝날 때까지 기다려줘야 한다는 것.

# show dbs : DB 조회.
  use wetube : DB 선택.
  show collections : 테이블(?) 조회.
  help : 도움.
  db.videos.find() 

# video object를 만드는 방법(2가지)
  1. object 생성
  2. await Video.create({})

# mongoDB가 생성하는 ID 의 정규식 : /:id([0-9a-f]{24})

# .findOne(조건) : 조건에 만족하는 것을 찾는다.

# .findById(id) : id에 만족하는 것을 찾는다.

# findByIdAndUpdate(id, 업데이트 할 정보 혹은 내용) : 

# 업데이트 하는 방법 2가지
  1. video.title = title 방식.
  2. findByIdAndUpdate() 활용.

# posetEdit 에서 video object를 검색 할 필요가 없다는 소리이다. 필터에 만족하는 데이터를 확인하고 결과를 출력.

# Model.exists() : exists()는 ID를 받지 않고 filter를 받는다. 

# 영상을 생성하거나 업데이트 하기 전에 작동할 function의 필요성.

# mongoose에도 미들웨어가 존재한다. 중요한 것은 무조건 model이 생성되기 전에 만들어야 한다.
  videoSchema.pre('save', async function() {
    this.hashtags = this.hashtags[0]
        .split(",")
        .map((word) => { return word.startsWith('#') ? word : `#${ word }`})
  })

# Model.findByIdAndDelete()

# delete와 remove의 차이점? 대부분의 경우에는 delete를 사용한다.

# form 에서 get으로 쿼리를 제출하면 controller에서는 req.query.keyword name 값 // 로 받을 수 있다.

# password가 그냥 String으로 저장되서 DB에서 조회가 가능하다면 굉장히 위험한것이다. password 해싱이 필요하다.
  해싱은 일방향 함수
  bcrypt.hash(this.password, 5);

# 해싱할 때 사용할 것은 bcrypt 라는 것. 

# 계정을 생성할 때 정상적으로 생성이 되지 않아도 200 상태코드를 반환해서 브라우저에서는 비밀번호 저장을 묻는다 사용자에게
  그러기 위해서 400 상태코드를 반환해줘야 한다. 
  res.status(400).render()

# 해싱한 암호를 비교
  bcrypt.compare(password, user.password);

# 로그인 할 때, 유저가 존재하는지 확인하고, 패스워드가 일치하는지 확인한다.

# 둘째로 유저를 기억하게 만들려면(쿠키와 세션에 대한 이해가 필요.)

# Session : 백엔드와 브라우저 간에 어떤 활동을 했는지 기억하는 것을 말한다.
  브라우저와 백엔드 사이의 memory, history 같은 것.
  그런데 이게 작동하려면 백엔드와 브라우저가 서로에 대한 정보를 가지고 있어야 한다.
  왜냐면 로그인 페이지에서 HTTP 요청을 하면 요청이 처리되고 끝나게 되는데, 그 이후로는 백엔드가 아무 것도 할 수 없다.
  유저가 로그인 할 때 유저한테 어떤 텍스트를 준다. 아직은 이게 뭔지 모르지만 유저가 누군인지 알 수 있게 해주는 무언가.
  그리고 유저한테는 무언가를 요청할 때마다 그 텍스트를 같이 보내달라고 할것이다.

# 요청을 받고 처리를 끝내면 서버에서는 누가 요청을 보냈는지 잊어버리게 되고 브라우저도 마찬가지로 잊어버리게 된다.
  서버가 더 이상 필요 없으니까. 한 번 연결이 되었다가 끝나는거야. 이 둘 사이 연결에 state가 없는거지
  그래서 우리는 유저한테 어떤 정보를 남겨줘야 해. 유저가 백엔드에 뭔가 요청 할 떄마다 누가 요청하는지 알 수 있게말야.

  그래서 유저가 로그인 할 때마다 유저한테 뭔가 줄거야. 이게 너의 텍스트니까 잘가지고 있으라고 알려주고
  유저가 우리한테 요청을 보낼 때마다 그 텍스트를 같이 보내달라고 하는거야. 그러면 "아! 이거 너구나!"하고 알 수 있고
  그 유저의 정보를 보여줄 수 있는거야

# 중요한건 유저가 로그인 할 때 유저한테 어떤 텍스트를 준다는거야

# express-session : 설치 npm i express-session
  이 미들웨어는 express에서 세션을 처리할 수 있게 해준다.
  설치 후 import session from "express-session";
  app.use(session({
    secret: "Hello!",
    resave: true,
    saveUninitialized: true,
  }))  -- 라우터 이전에 작성.
  미들웨어가 사이트로 들어오는 모두를 기억하게 될것이다.

# 누가 유저인지는 알 수 있지만 그 정보를 pug 템플릿과 공유하지 못한다.

# app.use((req, res, next) => {
    res.locals.siteName = "Wetube";});
  res.locals.로 미들웨어에서 모든 pug에 전역변수를 지정할 수 있다.

# 위의 middleware는 express-session이라는 대다한 module로 주어진것이다.
  이 middleware가 뭘 하냐면, 브라우저가 우리의 backend와 상호작용할 때마다
  session이라는 middleware가 브라우저에 cookie를 전송한다.
  cookie란 backend가 너의 브라우저에 주는 정보인데 cookie에는 정해진 규칙이
  있기 때문에, 너가 매번 backend에 request를 할 때 브라우저는 알아서 그 request에
  cookie를 덧붙이게 된다. 그렇기 때문에 이걸 위해서 너가 따로 해야할 것은 없는거다.
  게다가 브라우저는 우리가 매번 backend localhost에 있는 URL로 request를 보낼 때마다
  cookie가 request랑 같이 전송된다는 것도 알고있다.
  그럼 cookie에는 무슨 정보를 넣을 수 있을까?
  어떤 정보든 넣을 수 있다. 숫자를 넣어도 되고 문자를 넣어도 되고, 우리가 넣을 것은
  session ID 이다. 왜냐하면 브라우저와 backend와의 연결이 평생 보장된 것은 없기 때문이다.

# cookie는 단지 정보를 주고 받는 방법인거고, 그게 다야.
  또 다른 하나는 session ID인데, 이건 cookie에 저장이 된다.
  왜냐면 cookie는 session ID를 전송하는데 사용되기 때무네 서로 다른거다.

# Session store는 우리가 session을 저장하는 곳이다. 내가 매번 코드를 저장하면
  서버가 재시작되는데, session store는 사라져버린다. 왜냐면 이건 테스트를 위한
  저장소이기 때문이다.

# 그래서 기억할 수 있도록 cookie sotre를 MongoDB에 연결을 할 것이다.

# 우리는 session id는 쿠키에 저장하지만, 데이터 자체는 서버에 저장된다.

# 서버에 저장되는 default session storage는 MemoryStore이고, 실제 사용하기 위해 있는건 아니다.

# connect-mongo는 세션을 MongoDB에 저장할 것이다.
  세션은 데이터베이스에 저장되어 있기 때문에 누군가 로그인 되어있어도 잊어버리지 않을것이다.

# npm install connect-mongo
  import MongoStore from "connect-mongo";
  store: MongoStore.create({mongoUrl: "mongodb://127.0.0.1:27017/wetube"})
  이렇게 하면 앞으로의 세션정보는 mongose DB에 저장이 된다.

# resave와 saveUninitialized 의 차이점?
  session authentication(인증)을 사용하면 생길 수도 있는 문제에 대해서 배울 수 있다.

# 만약 봇(가짜사람)이 너의 웹사이트를 방문하거나, 로그인하지 않고 구경만 하려는 사용자들이 방문했다고 하면?
  정답은 우리가 모든 방문자에 대해 쿠키랑 session을 만들고 이 session을 DB에 모두 저장하는데, 그건 좋은 생각이 아니다.

# 아마도 로그인한 사용자의 session만 저장하는게 좋을거다.

# saveUninitialized: false  // 세션을 수정할 때만 세션을 DB에 저장하고 쿠키를 넘겨주는거다.
  이게 좋은 생각인게, backend가 DB에 저장하는게 session 인증에서의 문제점 중 하나이다.

# secret은 우리가 쿠키에 sign 할 때 사용하는 string이야.
  쿠키에 sign하는 이유는 우리 backend가 쿠키를 줬다는 걸 보여주기 위함이다.

# 왜냐면 session hijack(납치)라는 공격유형이 있다. 이걸 잘 보호해야 하는데, 누군가 너의 쿠키를 훔쳐서 마치 너인 척 할 수 있거든.
  이건 길게 작성되고 강력하고 무작위로 만들어야 한다.

# 쿠키에서의 Domain은 쿠키가 어디에서 왔는지, 어디로 가야하는지 알려주는것이다.

# 쿠키의 maxAge는 쿠키가 얼마나 오래 있을 수 있는지 알려주는것이며, 값은 1/1000초 단위로 쓰면 된다.

# secret 과 DB url은 보호를 해야한다. 민감한 정보인 것이다. 다른 사람이 보면 안되는 값을 쓰는것이다.

# .env에는 코드에 들어가면 안되는 값들을 추가할 것이다.
  .env 파일을 package.json 옆에 두어야 한다.
  .gitignore에도 추가해준다.
  그리고 관습적으로 env 파일에 추가하는 모든 건 대문자로 적어야한다.

# 어떻게 .env 파일에 접근을 할 수 있을까? process.env.DB_URL 처럼 써주면 된다.

# dotenv는 너의 env 파일을 읽고 각각의 변수들을 process.env에 넣을것이다.
  npm i dotenv
  최대한 빨리 env를 load 해야하기 때문에 가능한 제일 위에 넣는다. 변수가 필요한 모든 파일의 윗부분에 추가해야 한다.
  너무 번거롭기 때문에 우리가 import 방식으로 수정을 할 것이다.
  import "dotenv/config";

# 소셜 로그인(GIT HUB) 구현
  1. 사용자를 깃헙으로 리다이렉트
  2. 깃헙은 사용자를 우리 웹사이트로 돌려보낸다. 깃헙은 사용자를 token과 함께 redirect 시킨다.
  3. 그러면 우리가 그 토큰을 가지고 사용자 정보를 불러오는거다. 그 token은 매우 빠르게 만료될것이다.
  https://github.com/settings/developers
  4. Github에서 받은 토큰을 Access 토큰으로 바꿔준다.

# npm install node-fetch
  import fetch from "node-fetch"

# Version 3으로 설치되어 실행시키면, 아마 [ERR_REQUIRE_ESM] 가 뜰겁니다.
  이것은 node-fetch가 Version 3부터는 ESM-only Module이어서 그런 것 같습니다. 공식문서에서는 CSM(CommonJS)를 쓰는 사람들은 버전 2로 쓸 것을 권장한다고 합니다. 이미 설치하셨으면, npm uninstall node-fetch로 제거하시고
  npm install node-fetch@2.6.1 명령어 실행하시면 강의처럼 잘 굴러갑니다.

# npm i cross-fetch
  import fetch from 'cross-fetch';

# 우린 Github에 user를 보내고 user가 Github에서 "예"라고 하면 Github는 코드를 준다.
  그리고 그 코드를 가지고 access_token으로 바꿨다.
  그럼 access_token으로 Github API를 사용해 user 정보를 가져온다.

# Github 로그인 같은 소셜 로그인을 할 때, 만일 너가 이 email에 접근 권한이 있다는 게 증명이 된다면
  즉 password가 있거나 Github의 email이 verified 된거라면 너가 email 주인이라는 뜻이니까 널 로그인 시켜 줄 수 있어
  그래서 primary이면서 verified된 email을 찾는거야. 두 개 다 중요!
  예를 들어 Github login으로 계정을 만든 user 있을 때 즉, email은 있지만 password가 없는 경우
  이럴 때는 로그인 화면에서 user에게 이렇게 말해야 되겠지. "email은 있는데 password는 없어"라고
  이건 그들이 Github으로 로그인해야 한다는 뜻이야.

# Profile Edit을 했는데 업데이트가 적용이 안되는 부부은 프론트엔드는 session으로부터 정보를 얻기 때문이다.
  session은 로그인 할 때 한 번만 작성되고 있기 때문이다. 로그인 하고 나서는 session을 건드리지 않기 때문에.
  로그인 했을 때의 user가 그대로 남아있는거다. 그래서 DB에 있는 user 정보를 업데이트해도, session은 업데이트 되지 않는거다.
  한 마디로, session을 업데이트 해주면 된다는거다.
  req.session.user = {
        ...req.session.user  // req.session.user안에 있는 내용을 전해주는 것이다. 첫줄에 작성 아래 내용이 덮어쓸거니깐.
        name: name,
        email: email,
        username: username,
        location: location,
    }

# 기본적으로 findByIdAndUpdate는 update 되기 전의 데이터를 return 해준다.
  new: true 를 설정해주면 findByIdAndUpdaterk 업데이트된 데이터를 return 해줄거다.

# label의 for 속성에는 연결되는 input 요소의 id가 들어간다.

# input 타입이 file 인 것에는 accept 라는 속성이 존재하고 accept="image/*" 를 추가하면 이미지들만 받을 수 있다.

# multer는 우리가 파일을 업로드 할 수 있게 해준다.
  npm i multer
  form에다가 enctype="multipart/form-data"를 추가해준다.
  이 말은 우리의 form이 다르게 encode 될 거란 의미이다.

# // 사용자가 보낸 파일을 uploads 폴더에 저장하도록 설정된 middleware.
  export const uploadFiles = multer({
      dest: "uploads/"
  })

  userRouter
    .route("/edit")
    .all(protectorMiddleware)
    .get(getEdit)
    .post(uploadFiles.single("avatar"), postEdit);
  uploadFiles.single이 하는 역할은 template의 input에서 오는 avatar파일을 가지고
  파일을 업로드하고 uploads 폴더에 저장할거야.
  그리고 다음 controller인 postEdit에 그 파일의 정보를 전달하는거지
  좋은 소식은, 이렇게 하면 request에 req.file이 추가 된다는 것이다.

# DB에는 파일을 저장하는게 아닌 파일의 위치만 저장을 하는것이다.

# uploads 디렉토리에 있는 이미지가 계정편집에 나타나지 않는 경우는, 브라우저가 uploads 폴더에 있는
  내용을 볼 수 있게 해줘야 하는 상황이다.
  브라우저가 서버에 있는 파일에 접근할 수없으니까 우리가 브라우저한테 어디로 가야 하는지 얘기해줘야 해
  브라우저가 서버의 어떤 폴더로든 갈 수 있다고 생각해봐. 보안상 좋지 않겠지?
  그래서 우리가 브라우저가 어떤 페이지와 폴더를 볼 수 있는지 알려줘야해.
  그러기 위해서, static files serving 이라는걸 활성화 할거야.
  폴더 전체를 브라우저에게 노출 시킨다는 의미야.

# 문제점:
  1. 파일을 서버에 저장한다. 서버는 계속 종료되고 다시 시작하는 걸 반복한다.

# 영상을 틀면 누가 그 영상을 올렸는지 확인하고 싶어
  또한 해당 영상의 소유자가 아니면 이 두 버튼을 보이지 않게 만들거야.(영상을 업로드한 사람만이 수정과 삭제할 수 있잖아.)
  이 말은 'video' 파일을 누가 업로드 했는지 알 수 있어야 하고 사용자는 자신이 업로드한 영상들을 볼 수 있어야 한다.
  우리 'video'에는 'owner'항목이 없어 / user에는 'video list'를 추가해줄 필요가 있다.
  'video'가 하나의 'owner'만 가지도록 만들어야 하고, 'user'는 여러개의 'video'를 가질 수 있도록 만들어야 한다.

# 모델 스키마에서 object 타입을 작성할 경우에는 mongoose를 통해서 작성할 수 있지,
  mongoose.Schema.Types.ObjectId
  ref를 작성해야하는데 'mongoose'에게 owner에 id를 저장하겠다고 알려줘야하기 때문에

# 로그인된 사람의 'id' 와 영상의 'owner' 의 'id' 가 일치하면 로그인 된 사용자가 이 영상의 주인이라는 말이다.

# mongoose는 이 objectId 가 User 에서 오는걸 아니까 도와줄거야.
  const video = await  Video.findById(id).populate("owner");
  populate를 하면 'mongoose'가 'video'를 찾고 그 안에서 'owner'도 찾아줄거야.
  'mongoose'는 'owner'가 'object ID'인 것을 알고 이 'id'가 'User'에서 온것임을 알지
  'video'를 로드했을 때 User 정보도 얻을 수 있다. 
  'id' 뿐만 아니라 모든 정보를 볼 수 있다는 건 정말 대단한 일이야.

# userSchema.pre("save", async function() {
    if (this.isModified("password")) {
      this.password = await bcrypt.hash(this.password, 5);  
    }
  });
  여기에서 this.isModified는 비밀번호가 수정될 때만 'hash'가 일어날거다.




[ Webpack ]

# 우리가 Babel Node를 썼기 때문에 우리는 우리가 원하는대로 코드를 써도 Node.js가 이해할거라고 확실할 수 있어
  일너걸 프론트엔드 JavaScript에서도 해야해.
  백엔드 JavaScript는 Babel Node가 다 처리해 줘.
  하지만 프로트엔드 JavaScript도 그런 처리가 필요하다는 거지.

# 예를 들어 내가 .scss 파일을 작성한다고 하자. 이건 Sassy CSS라는건데 나중에 더 보게 될거야.
  하지만 이 파일을 이대로 둔다면 브라우저에서 받아들여지지 않아. 그래서 이걸 일반 css로 바꿀 필요가 있어.
  일반 CSS는 브라우저가 이해할 수 있으니까.

# 여러가지 멋있고 쿨하고 섹시한 JavaScript 기능들을 쓰고 싶은데
  브라우저가 이해를 못 할 수도 있어. 아니면 크롬에선 잘 돌아가는데 파이어폭스나 사파리에서 이해를 못 할 수도 있고
  그러니까 내가 지금 원하는 건 내가 프론트엔드에서 JavaScript 코드를 작성하면
  모든 브라우저에서 인식 가능한 JavaScript 로 바꿔주는 뭔가가 필요하다는 거야. 그래서 우리에게 Webpack이 필요한 거야. 

# 일단 Webpack을 설치부터 해야 해. 이거저것 설치를 할건데 이것들이 다 front-end 코드에 필요한 것들이야.
  아무튼 우리는 Webpack이랑 Webpack CLI를 설치 할 거야
  npm i webpack webpack-cli --save-dev

# Webpack은 우리 파일들을 바꿔줄거야. 그게 전부야. 
  아니다 "여기에 소스파일들이 있고 여기가 네(webpack)가 결과물을 보낼 폴더야."정도면 충분해

# Webpack을 설정하기 위해서는 webpack.config.js 라는 파일을 생성해야 해.
  참고로 이 파일은 굉장히 오래된 JavaScript 코드만 이해할 수 있어.
  그리고 오래된 node.js 같은 경우엔 export default를 안쓰지 대신에 module.export를 써.  

# Webpack configuration에는 두 가지 주의할게 있는데
  이 두 가지는 반드시 해야하는, 필수적인 거야.
  Entry는 우리가 처리하고자 하는 파일들이야.
  src 안에 client 폴더를 생성하고
  일면 우리는 client 폴더 안에 있는 코드들은 다 서버가 아니라 브라우저에서 실행될 거란걸 알 수 있지.
  그리고 여기 client 폴더 안에 두 개의 폴더를 더 만들건데 하나는 javascript고, 다른 하나는 나중에 만들거야.

# webpack을 실행시키기 위해서는 스크립트를 하나 만들어야 한다.
  "assets": "webpack --config webpack.config.js"
  npm run assets
  configuration output 경로는 절대경로여야 해.

# __dirname 은 Javascript가 제공하고 있는 상수야.

# 우리는 이 코드에 호환성을 추가해야 된다. 
  우리가 backend 코드를 babel을 이용해서 정리했듯이
  프론트엔드 코드도 babel을 이용해서 처리할 수 있다는 말이다.
  프론트엔드 코드 처리는 webpack.config.js에서 해야한다.

# 하지만 그 전에, 우리는 rules라는 컨셉에 대해 이해하고 넘어가야 한다.
  rules는 우리가 각각의 파일 종류에 따라 어떤 전환을 할 건지 결정하는거다.

# babel-loader
  npm install -D babel-loader

# The 'mode' option has not been set, webpack will fallback to 'production' for this value.
  우리가 해야 하는건 webpack한테 이 코드가 지금 개발중인지 아니면 완성품인지를 알려줘야 한다.
  mode를 설정 안해주면 기본으로 webpack은 production mode로 설정이 될거고 그렇게 되면
  코드들을 다 압축 할텐데 개발 중에는 이러지 않았으면 한다.